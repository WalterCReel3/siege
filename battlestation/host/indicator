#!/usr/bin/env python
#
# Receives score information from the Siege server and formats it for display
# on the light towers, then sends it to the Arduino program over a serial
# connection.

import sys
import serial
import logging
import datetime

from socketIO_client import SocketIO, BaseNamespace


# Handles events on the root namespace
class RootNamespace(BaseNamespace):
    def __init__(self, transport, path):
        BaseNamespace.__init__(self, transport, path)
        self._indicator = None

    @property
    def indicator(self):
        return self._indicator

    @indicator.setter
    def indicator(self, value):
        self._indicator = value

    def on_disconnect(self):
        self._indicator.stop = True


# Handles the socket.io events for the game
class GameNamespace(BaseNamespace):
    LEDS_PER_TERRITORY = 60
    SCORE_PERIOD = datetime.timedelta(milliseconds=100)
    FLASH_PERIOD = datetime.timedelta(seconds=5)

    def __init__(self, transport, path):
        BaseNamespace.__init__(self, transport, path)
        self._logger = logging.getLogger(type(self).__name__)
        self._indicator = None

        # territory => points
        self._scaled_points = {}
        # territory => datetime
        self._next_flash_at = {}
        # territory => datetime
        self._next_score_at = {}

    @property
    def indicator(self):
        return self._indicator

    @indicator.setter
    def indicator(self, value):
        self._indicator = value

    def on_event(self, event, *args):
        if event == 'game-update':
            data = args[0]
            try:
                self._on_game_update(data)
            except Exception as err:
                self._logger.error('error handling game update: %s', str(err))

    def _on_game_update(self, data):
        for territory in range(3):
            raw_points = data[str(territory)]['clans']
            scaled_points = GameNamespace.normalize(raw_points, GameNamespace.LEDS_PER_TERRITORY)

            if self._score_now(territory):
                self._indicator.execute('s %d 0 %d 1 %d 2 %d' %
                                        (territory, scaled_points[0], scaled_points[1], scaled_points[2]))

            # Flash if there was a change since the last time
            if self._flash_now(territory, scaled_points):
                self._indicator.execute('f %d 2 50' % territory)

    def _flash_now(self, territory, scaled_points):
        # Always update the saved points, but capture the old ones
        old_scaled_points = self._scaled_points.get(territory, None)
        self._scaled_points[territory] = scaled_points

        # If the points have not changed, no flashing required and no time to update
        if old_scaled_points == scaled_points:
            return False

        # Points changed; see if it's time
        now = datetime.datetime.now()
        if territory in self._next_flash_at:
            val = now >= self._next_flash_at[territory]
        else:
            val = True

        if val:
            self._next_flash_at[territory] = now + GameNamespace.FLASH_PERIOD
        return val

    def _score_now(self, territory):
        now = datetime.datetime.now()
        if territory in self._next_score_at:
            val = now >= self._next_score_at[territory]
        else:
            val = True

        if val:
            self._next_score_at[territory] = now + GameNamespace.SCORE_PERIOD
        return val

    # Normalizes the sequence of scores against the specified maximum value
    @staticmethod
    def normalize(scores, max_value):
        summation = sum(scores)
        new_scores = []
        for score in scores:
            if summation == 0:
                val = 0
            else:
                val = (float(score) / summation) * max_value
                val = int(round(val))
            new_scores.append(val)
        return new_scores


class Indicator(object):
    def __init__(self, serial_dev, serial_speed):
        self._logger = logging.getLogger(type(self).__name__)
        self._serial_dev = serial_dev
        self._serial_speed = serial_speed

        self._serial_file = None
        self._stop = False

    @property
    def stop(self):
        return self._stop

    @stop.setter
    def stop(self, value):
        self._stop = value

    def run(self):
        with serial.Serial(self._serial_dev, self._serial_speed, timeout=2) as serial_file:
            self._serial_file = serial_file
            self._shake_hands()
            with SocketIO('clicksiege.com', 80) as socketIO:
                root = socketIO.define(RootNamespace)
                root.indicator = self

                game = socketIO.define(GameNamespace, '/game')
                game.indicator = self

                fake_heartbeat_interval = datetime.timedelta(seconds=10)
                last_fake_heartbeat = datetime.datetime(1, 1, 1)
                while not self.stop:
                    socketIO.wait(seconds=1)
                    now = datetime.datetime.now()
                    if now >= last_fake_heartbeat + fake_heartbeat_interval:
                        socketIO.emit(event='ping')
                        last_fake_heartbeat = now

                self._logger.info('socket.io client stopped')

    # Try hard to connect to the Arduino device
    def _shake_hands(self):
        for attempt in range(10):
            print('shaking hands with indicator device...')
            if self.execute('p'):
                print('indicator connected')
                return True
        print('could not connect to indicator device')
        return False

    # Sends the command to the Arduino and returns True if the command executed
    # successfully, False if there was an error.
    def execute(self, command):
        # Consume the text prompt or any left-overs from previous commands
        while self._serial_file.inWaiting() > 0:
            junk = self._serial_file.read()
            self._logger.debug('read junk: %s', junk.strip())

        # Communication with the Arduino uses very simple flow control that remains
        # human friendly for manual debugging.  The host sends a command terminated
        # by a newline, the command executes, and the Arduino's response is one
        # or more lines that always ends in a full line of text of "ok" or "err".
        self._serial_file.write(command + '\n')
        self._logger.debug('write line: %s', command)
        self._serial_file.flush()
        while True:
            line = self._serial_file.readline()
            self._logger.debug('read line: %s', line.strip())
            if not line:
                self._logger.info('timeout waiting for ok ("%s")', command)
                return False

            line = line.strip()
            if line == 'ok':
                return True
            elif line == 'err':
                return False


# Does the thing
def main():
    logging.basicConfig(level=logging.DEBUG)
    logger = logging.getLogger()

    if len(sys.argv) < 2:
        sys.stderr.write('usage: %s /dev/ttyUSBn speed\n' % sys.argv[0])
        sys.exit(1)

    serial_dev = sys.argv[1]
    speed = int(sys.argv[2])

    indicator = Indicator(serial_dev, speed)
    indicator.run()


if __name__ == "__main__":
    main()
