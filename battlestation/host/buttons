#!/usr/bin/env python
#
# Handles button presses on the Siege battlestation and sends events to the
# Seige server.

import sys
import datetime
import logging
import contextlib
import termios
import time

from socketIO_client import SocketIO, BaseNamespace

DEVICES = {
    0: 'znemxs63dyddy',
    1: 'kjdobbempami4',
    2: 'hguxnrsq4vdq4'
}

# Maps keys to teams.  These are the default chars we get from the Minpac for pin 1-n
# (ignoring groups)
ATTACK_KEYMAP = {
    'a': 0,
    'b': 0,
    'c': 0,

    'd': 1,
    'e': 1,
    'f': 1,

    'g': 2,
    'h': 2,
    'i': 2,
}

ADVANCE_TARGET_KEYMAP = {
    '1': 0,
    '2': 1,
    '3': 2,
}

targeted_territories = {
    0: 0,
    1: 0,
    2: 0,
    3: 0
}

# Handles events on the root namespace
class RootNamespace(BaseNamespace):
    def __init__(self, transport, path):
        BaseNamespace.__init__(self, transport, path)
        self._buttons = None

    @property
    def buttons(self):
        return self._buttons

    @buttons.setter
    def buttons(self, value):
        self._buttons = value

    def on_disconnect(self):
        self._buttons.stop = True


class GameNamespace(BaseNamespace):
    def __init__(self, transport, path):
        BaseNamespace.__init__(self, transport, path)
        self._logger = logging.getLogger(type(self).__name__)


class Buttons(object):
    def __init__(self):
        self._logger = logging.getLogger(type(self).__name__)
        self._stop = False

    @property
    def stop(self):
        return self._stop

    @stop.setter
    def stop(self, value):
        self._stop = value

    @contextlib.contextmanager
    def _non_blocking_term(self, f, echo=True):
        fd = f.fileno()
        old_attr = None
        try:
            old_attr = termios.tcgetattr(fd)
            new_attr = termios.tcgetattr(fd)
            new_attr[3] = new_attr[3] & ~termios.ICANON
            if not echo:
                new_attr[3] = new_attr[3] & ~termios.ECHO
            new_attr[6][termios.VMIN] = 0
            new_attr[6][termios.VTIME] = 0
            termios.tcsetattr(fd, termios.TCSANOW, new_attr)
            yield
        except termios.error as err:
            self._logger.warn('error setting nonblocking terminal: %s', str(err))
            yield
        finally:
            if old_attr:
                termios.tcsetattr(fd, termios.TCSADRAIN, old_attr)

    def run(self):
        with self._non_blocking_term(sys.stdin, echo=False):
            while True:
                with SocketIO('clicksiege.com', port=80) as socketIO:
                    root = socketIO.define(RootNamespace)
                    root.buttons = self
                    game = socketIO.define(GameNamespace, '/game')

                    fake_heartbeat_interval = datetime.timedelta(seconds=10)
                    last_fake_heartbeat = datetime.datetime(1, 1, 1)
                    while not self.stop:
                        char = sys.stdin.read(1)
                        if char:
                            if char in ATTACK_KEYMAP:
                                team = ATTACK_KEYMAP[char]
                                territory = targeted_territories.get(team, None)
                                if territory is None:
                                    self._logger.warn('no attack; team %d has no target territory', team)
                                else:
                                    self._logger.debug('team %d attacks territory %d', team, territory)
                                    game.emit('click-event', dict(device_id=DEVICES[team], territory=territory))
                            elif char in ADVANCE_TARGET_KEYMAP:
                                team = ADVANCE_TARGET_KEYMAP[char]

                                # Increment target territory
                                territory = targeted_territories.get(team, -1)
                                territory += 1
                                if territory > 3:
                                    territory = 0
                                targeted_territories[team] = territory

                                self._logger.debug('team %d targets territory %d', team, territory)
                                # Must send a click with the new territory to switch
                                game.emit('click-event', dict(device_id=DEVICES[team], territory=territory))
                            else:
                                self._logger.error('key "%s" (dec %d) is not mapped to anything', char, ord(char))

                        # Fake some heartbeats
                        now = datetime.datetime.now()
                        if now >= last_fake_heartbeat + fake_heartbeat_interval:
                            game.emit(event='ping')
                            last_fake_heartbeat = now

                        # Small sleep so we don't burn down the house
                        time.sleep(0.0001)

                self._logger.warning('socket disconnected, reconnecting')


# Does the thing
def main():
    logging.basicConfig(level=logging.DEBUG, filename='/tmp/buttons.log')
    logger = logging.getLogger()

    buttons = Buttons()
    buttons.run()


if __name__ == "__main__":
    main()
